<html>
2	<head>
3	    <script type="text/javascript">
4	    // What is not possible in the current API:
5	    // - getting updates when a user edits just an url of a bookmark
6	    // - displaying dialog boxes
7	    // - exchanging an url before default page is loaded
8	    // TODO: add a possibility to edit an existing keyword bookmark (page action?)
9	    
10	    // test + remove keywords folder seems not to work
11	
12	    var keywordsFolderName = "Keywords extension";
13	    var keywordsFolder;
14	    // keyword -> url
15	    var keywordsDictionary = {};
16	    // bookmark id -> keyword
17	    var bookmarkToKeywordDictionary = {};
18	    var titleRegexp = new RegExp("\\[(.*)\\].*");
19	    var encodedUrlPrefix = "http://chrome-keywords/?url=";
20	    var encodedUrlPrefixRegExp = /http:\/\/chrome-keywords\/\?url=(.*)/;
21	
22	    function addKeyword(bookmarkId, keyword, url) {
23	      keywordsDictionary[keyword] = url;
24	      bookmarkToKeywordDictionary[bookmarkId] = keyword;
25	    }
26	
27	    function tryToRemoveKeyword(bookmarkId) {
28	      var keyword = bookmarkToKeywordDictionary[bookmarkId];
29	      if (!keyword) return false;
30	      bookmarkToKeywordDictionary[bookmarkId] = null;
31	      keywordsDictionary[keyword] = null;
32	      return true;
33	    }
34	    
35	    function extractUrlFromEncoded(encodedUrl) {
36	      var match = encodedUrlPrefixRegExp.exec(encodedUrl);
37	      if (match && (match.length > 1)) {
38	        return unescape(match[1]);
39	      }
40	      return null;
41	    }
42	
43	    function tryToAddKeyword(bookmarkId, title, url) {
44	      var keyword = titleRegexp.exec(title);
45	      // keyword[0] is the whole title
46	      if (keyword && (keyword.length > 1)) {
47	        var strippedUrl = extractUrlFromEncoded(url);
48	        if (strippedUrl) {
49	          addKeyword(bookmarkId, keyword[1], strippedUrl);
50	        } else {
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100	          addKeyword(bookmarkId, keyword[1], url);
        }
      }
    }

    function fillKeywordsDictionary(tree) {
      for (var i in tree) {
        if (tree[i].url) {
          // data bookmark, not a folder
          tryToAddKeyword(tree[i].id, tree[i].title, tree[i].url);
        } else {
          fillKeywordsDictionary(tree[i].children);
        }
      }
    }

    function findKeywordsFolder(tree) {
      for (var i in tree) {
        if (tree[i].title == keywordsFolderName) {
          keywordsFolder = tree[i];
          fillKeywordsDictionary(tree[i].children);
          return;
        }
        findKeywordsFolder(tree[i].children);
      }
    }
    
    function bookmarkExists(tree, id) {
      for (i in tree) {
        if (tree[i].id == id) {
          return true;
        }
        if (bookmarkExists(tree[i].children, id)) return true;
      }
      return false;
    }
    
    function tryToAddKeywordIfInFolder(id, parentId, title, url) {
      if (!keywordsFolder) return;
      if (keywordsFolder.id == parentId) {
        tryToAddKeyword(id, title, url);
      } else {
        chrome.bookmarks.getChildren(keywordsFolder.id, function (tree) {
          if (bookmarkExists(tree, parentId)) {
            tryToAddKeyword(id, title, url);
          }
        });
      }
    }
    
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150	    function updateKeyword(bookmarkId) {
      // removing old keyword if it existed
      tryToRemoveKeyword(bookmarkId);
      // trying to add a new keyword if title contains it
      chrome.bookmarks.get(bookmarkId, function (tree) {
        if (tree.length > 0) {
          tryToAddKeywordIfInFolder(bookmarkId, tree[0].parentId, tree[0].title, tree[0].url);
        }
      });
    }

    function openEditBookmarkTab(address, title) {
      var parameters = "?url=";
      parameters += escape(address);
      if (title) {
        parameters += "&title=";
        parameters += escape(title);
      }
      chrome.tabs.create({"url": "editBookmark.html" + parameters});
    }

    function createNewBookmark(folder, title, keyword, url) {
      if (url && (url.search("://")) == -1) {
        url = "http://" + url;
      }
      var encodedUrl = url;
      if (url.match(/%s/)) {
        encodedUrl = encodedUrlPrefix + escape(url);
      }
      chrome.bookmarks.create({"parentId": folder, "title": "[" + keyword + "] " + title, "url": encodedUrl},
                              function (bookmark) {
                                if (bookmark) {
                                  addKeyword(bookmark.id, keyword, url);
                                }
                              });
    }

    function addNewBookmark(title, keyword, url) {
      if (keywordsFolder) {
        createNewBookmark(keywordsFolder.id, title, keyword, url);
      } else {
        chrome.bookmarks.create({"parentId": "1", "title": keywordsFolderName},
                                function(folder) {
                                  keywordsFolder = folder;
                                  createNewBookmark(folder.id, title, keyword, url);
                                });
      }
    }

    // Initializing keywords
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200	    chrome.bookmarks.getTree(function (tree) {
      findKeywordsFolder(tree);
    });

    chrome.pageActions["keywordsadd"].addListener(function(pageaction) {
      /* // According to API but doesn't work now
      chrome.tabs.get(pageaction.data.tabId, function (tab) {
        openEditBookmarkTab(pageaction.data.tabUrl, tab.title);
      });*/
      chrome.windows.getCurrent(function (window) {
        chrome.tabs.getSelected(window.id, function (tab) {
          openEditBookmarkTab(tab.url, tab.title);
        });
      });
    });
    
    var mostRecentTabId;

    chrome.tabs.onUpdated.addListener(function (tabId, data) {
      if (tabId == mostRecentTabId) {
        // changing the url fires the same event again
        mostRecentTabId = null;
        return;
      }
      if (data.url) {
        // url in the tab has changed
        var keywords = data.url.replace(/^.*q=/, "").split("+");
        var newurl = null;
        if (keywords.length > 0) {
          newurl = keywordsDictionary[keywords[0]];
          if (newurl) {
            for (var i = 1; i < keywords.length; ++i) {
              newurl = newurl.replace(/%s/, keywords[i]);
            }
            newurl = newurl.replace(/%s/g, "");
          } else {
            newurl = extractUrlFromEncoded(data.url);
          }
        }
        if (newurl) {
          chrome.tabs.update(tabId, { "url": newurl }, function () {
              mostRecentTabId = tabId;
          });
        }
      }
    });

    chrome.bookmarks.onRemoved.addListener(function (id, data) {
      if (!tryToRemoveKeyword(id)) {
        // Removed folder - reloading the structure. Can be optimized.
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250	        chrome.bookmarks.getTree(function (tree) {
          keywordsFolder = null;
          keywordsDictionary = {};
          bookmarkToKeywordDictionary = {};
          findKeywordsFolder(tree);
        });
      }
    });
    
    
    // This event is fired when bookmark creation dialog is shown
    chrome.bookmarks.onCreated.addListener(function(id, bookmark) {
      tryToAddKeywordIfInFolder(id, bookmark.parentId, bookmark.title, bookmark.url);
    });

    // This event is never fired if just an url changes
    chrome.bookmarks.onChanged.addListener(function (id, data) {
      if (data.title) {
        updateKeyword(id);
      }
    });
    
    // If a bookmark is added to the folder then add a keyword, if it is removed then remove.
    chrome.bookmarks.onMoved.addListener(function (id, data) {
      if (data.parentId != data.oldParentId) {
        updateKeyword(id);
      }
    });
        
    chrome.tabs.onUpdated.addListener(function(tabid) {
      chrome.tabs.get(tabid, function(currentTab) {
           chrome.pageActions.enableForTab('keywordsadd', {
                          tabId: currentTab.id,
                          url: currentTab.url,
                          title: "Add bookmark with keywords",
                          iconId: 0
                      });
      });
    });
    
    
    function isAlwaysThere() {
      console.log("action");
    }
    
    var action = isAlwaysThere;

    </script>
</head>
<body>
251
252	</body>
</html>
